#include <iostream>          // Подключение библиотеки для ввода/вывода
#include <vector>           // Подключение библиотеки для работы с векторами
#include <string>           // Подключение библиотеки для работы со строками
#include <limits>           // Подключение библиотеки для работы с границами типов данных
#include <cctype>           // Подключение библиотеки для работы с символами 

class Point {              // Определение класса Point
private:
    int x, y;             // Закрытые переменные для хранения координат точки

public:
    Point(int x, int y) : x(x), y(y) {}   // Конструктор класса, инициализирующий координаты

    std::string print() const {             // Метод для получения строки с представлением точки
        return "{" + std::to_string(x) + ";" + std::to_string(y) + "}"; // Форматирование строки
    }
};

class Line {               // Определение класса Line
private:
    Point start, end;      // Переменные для хранения начальной и конечной точек линии

public:
    Line(Point start, Point end) : start(start), end(end) {}  // Конструктор класса, инициализирующий начальную и конечную точки

    Point getStart() const {   // Метод для получения начальной точки
        return start;          // Возвращаем начальную точку
    }

    Point getEnd() const {     // Метод для получения конечной точки
        return end;            // Возвращаем конечную точку
    }

    void setStart(Point newStart) { // Метод для установки новой начальной точки
        start = newStart;      // Присваиваем новую начальную точку
    }

    void setEnd(Point newEnd) {   // Метод для установки новой конечной точки
        end = newEnd;          // Присваиваем новую конечную точку
    }

    std::string print() const {  // Метод для получения строки с представлением линии
        return "Линия от " + start.print() + " до " + end.print(); // Форматирование строки
    }
};

// Класс для представления студента
class Student{
private:
    std::string name;                          // Имя студента
    std::vector<int> grades;                   // Вектор для хранения оценок студента

public:
    // Конструктор с инициализацией имени и оценок
    Student(const std::string& name, const std::vector<int>& grades = {}) : name(name), grades(grades) {}

    std::string print() const {                // Метод для получения строки с представлением студента
        std::string result = "Имя: " + name + " ["; // Начинаем формировать строку
        for (size_t i = 0; i < grades.size(); i++) { // Проходим по всем оценкам
            result += std::to_string(grades[i]); // Добавляем оценку в строку
            if (i < grades.size() - 1)          // Если это не последняя оценка
                result += ", ";                  // Добавляем запятую
        }
        result += "]";                           // Завершаем формировать строку
        return result;                           // Возвращаем строку
    }

    float averageGrade() const {                // Метод для расчета среднего балла
        if (grades.empty()) return 0;           // Если оценок нет, возвращаем 0
        float sum = 0;                          // Переменная для суммы оценок
        for (int grade : grades) {              // Проходим по всем оценкам
            sum += grade;                        // Суммируем оценки
        }
        return sum / grades.size();              // Возвращаем среднее значение
    }

    bool isExcellent() const {                   // Метод для проверки, является ли студент отличником
        if (grades.empty()) return false;       // Если оценок нет, возвращаем false
        for (int grade : grades) {              // Проходим по всем оценкам
            if (grade != 5) return false;       // Если есть хоть одна оценка, не равная 5, возвращаем false
        }
        return true;                            // Если все оценки 5, возвращаем true
    }

    void setGrade(size_t index, int value) {   // Метод для установки оценки по индексу
        if (index < grades.size()) {            // Проверяем, что индекс в пределах
            grades[index] = value;              // Устанавливаем оценку
        } else {
            std::cerr << "Индекс выхода за пределы! Попробуйте снова.\n"; // Сообщаем об ошибке
        }
    }

    const std::vector<int>& getGrades() const { // Метод для получения оценок
        return grades;                          // Возвращаем вектор оценок
    }

    void setGrades(const std::vector<int>& newGrades) { // Метод для установки новых оценок
        grades = newGrades;                     // Присваиваем новые оценки
    }
};

// Утилитарные функции для валидации ввода
template<typename T>
T getValue(const std::string& prompt) {      // Шаблонная функция для получения значения
    T value;                                  // Переменная для хранения значения
    while (true) {                            // Бесконечный цикл для повторения ввода
        std::cout << prompt;                  // Запрос ввода
        std::cin >> value;                    // Ввод значения
        if (std::cin.fail()) {                // Проверка на ошибки ввода
            std::cin.clear();                  // Очистка состояния потока
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Игнорируем некорректный ввод
            std::cout << "Ошибка ввода! Пожалуйста, введите корректное значение.\n"; // Сообщаем об ошибке
        } else {
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Игнорируем оставшиеся символы
            break;                             // Прерываем цикл
        }
    }
    return value;                             // Возвращаем корректное значение
}

// Функция проверки имени на наличие чисел
bool isNameValid(const std::string& name) {  // Функция для проверки имени
    for (char c : name) {                     // Проходим по всем символам имени
        if (std::isdigit(c)) {                 // Если символ - цифра
            return false;                      // Возвращаем false
        }
    }
    return true;                              // Если все символы корректны, возвращаем true
}

// Функция для получения имени студента с проверкой
std::string getStudentName(const std::string& prompt) { // Функция для ввода имени студента
    std::string name;                          // Переменная для хранения имени
    while (true) {                            // Бесконечный цикл для повторения ввода
        std::cout << prompt;                  // Запрос ввода имени
        std::getline(std::cin, name);        // Чтение имени
        if (isNameValid(name)) {              // Проверка корректности имени
            return name;                      // Если корректно, возвращаем имя
        } else {
            std::cout << "Ошибка! Имя не должно содержать цифр. Попробуйте снова.\n"; // Сообщаем об ошибке
        }
    }
}

// Функция для получения оценки с проверкой
int getValidGrade() {                          // Функция для получения оценки
    int grade;                                 // Переменная для хранения оценки
    while (true) {                             // Бесконечный цикл для повторения ввода
        grade = getValue<int>("Введите оценку (от 1 до 5): "); // Получаем оценку
        if (grade >= 1 && grade <= 5) {      // Проверка диапазона
            return grade;                    // Если корректно, возвращаем оценку
        } else {
            std::cout << "Ошибка! Оценка должна быть от 1 до 5. Попробуйте снова.\n"; // Сообщаем об ошибке
        }
    }
}

void task1() {                                  // Функция для реализации задачи 1
    std::cout << "Задача 1:\n";                // Вывод заголовка задачи
    int x, y;                                  // Переменные для хранения координат
    std::cout << "Введите координаты точки 1 (x y): "; // Запрос координат первой точки
    std::cin >> x >> y;                        // Ввод координат первой точки
    Point p1(x, y);                            // Создание первой точки

    std::cout << "Введите координаты точки 2 (x y): "; // Запрос координат второй точки
    std::cin >> x >> y;                        // Ввод координат второй точки
    Point p2(x, y);                            // Создание второй точки

    std::cout << "Введите координаты точки 3 (x y): "; // Запрос координат третьей точки
    std::cin >> x >> y;                        // Ввод координат третьей точки
    Point p3(x, y);                            // Создание третьей точки
    
    std::cout << "Точки:\n";                   // Вывод заголовка для точек
    std::cout << p1.print() << "\n";          // Вывод первой точки
    std::cout << p2.print() << "\n";          // Вывод второй точки
    std::cout << p3.print() << "\n";          // Вывод третьей точки
}

void task2() {                                  // Функция для реализации задачи 2
    std::cout << "Задача 2:\n";                // Вывод заголовка задачи

    Point start1(1, 3);                        // Начальная точка линии 1
    Point end1(23, 8);                         // Конечная точка линии 1
    Line line1(start1, end1);                  // Создание линии 1
    std::cout << "Линия 1: " << line1.print() << "\n"; // Вывод линии 1

    int height = 10;                           // Высота для линии 2
    Point start2(5, height);                   // Начальная точка линии 2
    Point end2(25, height);                    // Конечная точка линии 2
    Line line2(start2, end2);                  // Создание линии 2
    std::cout << "Линия 2: " << line2.print() << "\n"; // Вывод линии 2

    Line line3(start1, end2);                  // Создание линии 3, зависящей от линий 1 и 2
    std::cout << "Линия 3 (зависит от линий 1 и 2): " << line3.print() << "\n"; // Вывод линии 3

    // Обновление координат для линии 1
    int newX1Start = 2, newY1Start = 4, newX1End = 24, newY1End = 9; // Новые координаты начала и конца
    line1.setStart(Point(newX1Start, newY1Start)); // Установка новой начальной точки
    line1.setEnd(Point(newX1End, newY1End));       // Установка новой конечной точки
    std::cout << "После изменения линии 1:\n";      // Вывод информации об изменении линии 1
    std::cout << line1.print() << "\n";             // Вывод линии 1 после изменений

    line3.setStart(Point(newX1Start, newY1Start)); // Изменяем начальную точку линии 3
    line3.setEnd(end2);                             // Изменяем конечную точку линии 3
    std::cout << "Линия 3 после изменения линии 1:\n"; // Вывод линии 3 после изменения линии 1
    std::cout << line3.print() << "\n";             // Вывод линии 3 после изменений

    // Обновление координат для линии 2
    int newHeight = 12, newX2Start = 6, newX2End = 26; // Новые координаты для линии 2
    line2.setStart(Point(newX2Start, newHeight)); // Установка новой начальной точки для линии 2
    line2.setEnd(Point(newX2End, newHeight));     // Установка новой конечной точки для линии 2
    std::cout << "После изменения линии 2:\n";    // Вывод информации об изменении линии 2
    std::cout << line2.print() << "\n";             // Вывод линии 2 после изменений

    line3.setEnd(Point(newX2End, newHeight));      // Изменяем конечную точку линии 3
    std::cout << "Линия 3 после изменения линии 2:\n"; // Вывод линии 3 после изменения линии 2
    std::cout << line3.print() << "\n";             // Вывод линии 3 после изменений
}

void task3() {                                  // Функция для реализации задачи 3
    std::cout << "Задача 3:\n";                // Вывод заголовка задачи
    std::string name1 = getStudentName("Введите имя первого студента: "); // Ввод имени первого студента
    std::vector<int> grades1 = {                // Вектор для хранения оценок первого студента
        getValidGrade(),                        // Ввод первой оценки
        getValidGrade(),                        // Ввод второй оценки
        getValidGrade()                         // Ввод третьей оценки
    };

    Student student1(name1, grades1);               // Создание первого студента с введенным именем и оценками
    
    std::string name2 = getStudentName("Введите имя второго студента: "); // Ввод имени второго студента
    Student student2(name2, student1.getGrades()); // Создание второго студента, копирующего оценки первого

    student2.setGrade(0, 5);                    // Установка первой оценки студента 2 на 5 (выше, чем у студента 1)
    
    std::cout << student1.print() << "\n";      // Проверяем результат, он не должен измениться (лишь выводим)
    std::cout << student2.print() << "\n";      // Проверяем результат (второго студента)

    std::string name3 = getStudentName("Введите имя третьего студента: "); // Ввод имени третьего студента
    Student student3(name3, student1.getGrades()); // Создание третьего студента, копирующего оценки первого
    
    student1.setGrade(0, 4);                     // Изменяем первую оценку первого студента
    std::cout << "После изменения оценок Васи:\n"; // Вывод информации после изменения
    std::cout << student1.print() << "\n";      // Вывод первого студента
    std::cout << student2.print() << "\n";      // Вывод второго студента
    std::cout << student3.print() << "\n";      // Вывод третьего студента
}

void task4() {                                  // Функция для реализации задачи 4
    std::cout << "Задача 4:\n";                // Вывод заголовка задачи
    int numberOfPoints = getValue<int>("Введите количество точек, которые вы хотите ввести: "); // Запрос количества точек
    std::vector<Point> points;                  // Вектор для хранения точек

    for (int i = 0; i < numberOfPoints; ++i) { // Цикл для ввода точек
        int x, y;                              // Переменные для хранения координат точки
        std::cout << "Введите координаты точки " << (i + 1) << " (x y): ";  // Запрос координат
        std::cin >> x >> y;                    // Ввод координат точки
        points.emplace_back(x, y);             // Добавление новой точки в вектор
    }

    std::cout << "Точки:\n";                   // Вывод заголовка для точек
    for (const auto& point : points) {         // Проходим по всем точкам в векторе
        std::cout << point.print() << "\n";    // Вывод точки
    }
}

void task5() {                                  // Функция для реализации задачи 5
    std::cout << "Задача 5:\n";                // Вывод заголовка задачи

    std::string name1 = getStudentName("Введите имя первого студента: "); // Ввод имени первого студента
    std::vector<int> grades1;                  // Вектор для хранения оценок первого студента
    int grade;                                  // Переменная для хранения текущей оценки
    while (true) {                             // Бесконечный цикл для ввода оценок
        grade = getValidGrade();               // Получение оценки
        grades1.push_back(grade);              // Добавление оценки в вектор
        std::cout << "Введите следующую оценку для " << name1 << " (или введите -1 для завершения ввода): "; // Запрос следующей оценки
        std::cin >> grade;                     // Ввод следующей оценки
        if (grade == -1) break;                // Если введено -1, фиксируем конец ввода
        grades1.push_back(grade);              // Добавляем оценку в вектор
    }

    Student student1(name1, grades1);           // Создание первого студента с введенным именем и оценками
    
    // Запрашиваем имя второго студента и его оценки отдельно
    std::string name2 = getStudentName("Введите имя второго студента: "); // Ввод имени второго студента
    std::vector<int> grades2;                  // Вектор для хранения оценок второго студента
    while (true) {                             // Бесконечный цикл для ввода оценок
        grade = getValidGrade();               // Получение оценки
        grades2.push_back(grade);              // Добавление оценки в вектор
        std::cout << "Введите следующую оценку для " << name2 << " (или введите -1 для завершения ввода): "; // Запрос следующей оценки
        std::cin >> grade;                     // Ввод следующей оценки
        if (grade == -1) break;                // Если введено -1, фиксируем конец ввода
        grades2.push_back(grade);              // Добавляем оценку в вектор
    }

    Student student2(name2, grades2);           // Создание второго студента с введенным именем и оценками
    
    // Вывод информации о первом ученике
    std::cout << student1.print() << "\n";    // Вывод информации о первом студенте
    std::cout << "Средний балл студента " << name1 << ": " << student1.averageGrade() << "\n"; // Вывод среднего балла    
    std::cout << "Является ли студент " << name1 << " отличником: " << std::boolalpha << student1.isExcellent() << "\n"; // Проверка на отличные оценки

    // Вывод информации о втором студенте
    std::cout << student2.print() << "\n";    // Вывод информации о втором студенте
    std::cout << "Средний балл студента " << name2 << ": " << student2.averageGrade() << "\n"; // Вывод среднего балла    
    std::cout << "Является ли студент " << name2 << " отличником: " << std::boolalpha << student2.isExcellent() << "\n"; // Проверка на отличные оценки
}

void task6() {                                  // Функция для реализации задачи 6
    std::cout << "Задача 6:\n";                // Вывод заголовка задачи

    std::string name1 = getStudentName("Введите имя первого студента: "); // Ввод имени первого студента
    std::vector<int> grades1;                  // Вектор для хранения оценок первого студента
    int grade;                                  // Переменная для хранения текущей оценки
    
    while (true) {                             // Бесконечный цикл для ввода оценок
        grade = getValidGrade();               // Получение оценки
        grades1.push_back(grade);              // Добавление оценки в вектор
        std::cout << "Введите следующую оценку для " << name1 << " (или введите -1 для завершения ввода): "; // Запрос следующей оценки
        std::cin >> grade;                     // Ввод следующей оценки
        if (grade == -1) break;                // Если введено -1, фиксируем конец ввода
    }
    
    // Добавляем это, чтобы очистить оставшиеся символы в буфере ввода
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Очищаем буфер ввода
    
    Student student1(name1, grades1);           // Создание первого студента с введенным именем и оценками
    std::cout << student1.print() << "\n";      // Вывод информации о первом студенте

    // Запрашиваем имя второго студента отдельно
    std::string name2 = getStudentName("Введите имя второго студента: "); // Ввод имени второго студента
    Student student2(name2); // Создание второго студента без оценок
    std::cout << student2.print() << "\n";      // Вывод информации о втором студенте
}

int main() {                                   // Главная функция
    int choice;                               // Переменная для хранения выбора пользователя
    while (true) {                            // Бесконечный цикл для выбора задач
        std::cout << "\nМеню:\n";             
        std::cout << "1. Точка\n";           
        std::cout << "2. Линия\n";           
        std::cout << "3. Студенты\n";        
        std::cout << "4. Точка (измененные требования)\n"; 
        std::cout << "5. Студенты (измененные требования)\n"; 
        std::cout << "6. Студенты (новые требования)\n"; 
        std::cout << "0. Выход\n";            

        choice = getValue<int>("Выберите задачу: "); // Запрос выбора задачи
        
        switch (choice) {                     
            case 1: task1(); break;          
            case 2: task2(); break;         
            case 3: task3(); break;          
            case 4: task4(); break;          
            case 5: task5(); break;          
            case 6: task6(); break;          
            case 0: return 0;                
            default: std::cout << "Некорректный выбор. Попробуйте еще раз.\n"; 
        }
    }
}
